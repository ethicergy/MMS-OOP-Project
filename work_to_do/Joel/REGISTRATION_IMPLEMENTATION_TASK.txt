# üéØ JOEL'S TASK: REGISTRATION SYSTEM IMPLEMENTATION

**Assigned to**: Joel  
**Priority**: HIGH  
**Estimated Time**: 3-4 hours  
**Status**: NOT STARTED

---

## üìã TASK OVERVIEW
Replace the registration placeholder popup with a fully functional registration form that switches between login/register modes in the same window.

---

## üéØ OBJECTIVES
1. Replace `JOptionPane.showMessageDialog` in register link with actual form
2. Create registration form with same visual style as login
3. Implement validation using existing inline message system
4. Use existing SHA-256 password hashing automatically

---

## üìÅ FILE TO MODIFY
**PRIMARY**: `src/main/java/com/mms/UI/LoginFrame_1.java` (lines 167-169)

---

## üóÑÔ∏è REGISTRATION FIELDS NEEDED
Based on database schema:
1. **Name** (VARCHAR 80)
2. **Email** (VARCHAR 100, unique)  
3. **Password** (auto-hashed)
4. **Confirm Password** (validation only)
5. **Role** (auto-set to "user")

---

## üîß FUNCTIONS TO IMPLEMENT

### **1. Replace Register Link Handler**
**Current**: `JOptionPane.showMessageDialog`  
**New**: Call `showRegistrationForm()`

### **2. Core Methods to Add**
```java
private void showRegistrationForm()           // Clear formPanel, build registration UI
private void showLoginForm()                  // Restore original login UI  
private void handleRegistration(fields...)    // Process registration submission
private boolean validateRegistrationInput()   // Validate all registration fields
```

### **3. UI Building Pattern**
- Use `formPanel.removeAll()` to clear current form
- Use same `GridBagLayout` + `GridBagConstraints` pattern as login
- Copy font/color/size from existing login fields
- Add fields: Name, Email, Password, Confirm Password, Register Button, Back Link
- Call `formPanel.revalidate()` and `formPanel.repaint()` to refresh

### **4. Validation Rules**
- Empty field checks for all inputs
- Email format using existing `isValidEmail()` method
- Password minimum 8 characters
- Password confirmation match
- Name max 80 characters
- Use existing `showError()` for validation messages

### **5. Registration Process**
- Create `User` object with form data
- Set role to "user" (don't let user choose)
- Call existing `UserDAO.createUser(user)` method
- Handle duplicate email constraint gracefully
- Show success message and auto-return to login after 2 seconds

---

## üé® DESIGN CONSISTENCY
**Match Existing Login Form:**
- Fonts: `SansSerif BOLD 18` (labels), `SansSerif PLAIN 18` (fields)
- Colors: Background `Color(234,224,213)`, Button `Color(34,51,59)`
- Sizes: Fields `Dimension(250,35)`, Button `Dimension(200,45)`
- Layout: Same `GridBagConstraints` pattern with `Insets(10,10,10,10)`

**Use Existing Methods:**
- `showError(message)` - red inline error display
- `showSuccess(message)` - green inline success display  
- `clearMessages()` - clear both message labels
- `isValidEmail(email)` - email format validation

---

## üö® CRITICAL REQUIREMENTS
1. **NO POPUPS**: Use inline messaging only (preserve UX pattern)
2. **PASSWORD SECURITY**: UserDAO automatically hashes passwords
3. **ERROR HANDLING**: Handle duplicate email constraint violation gracefully
4. **VISUAL CONSISTENCY**: Must look identical to login form
5. **KEYBOARD SUPPORT**: Set register button as default for Enter key

---

## üß™ TESTING CHECKLIST
**Validation**: Empty fields, invalid email, password mismatch, duplicate email  
**Success Flow**: Register ‚Üí verify in DB ‚Üí login with new account  
**UI/UX**: Visual consistency, Enter key, back to login functionality

---

## ÔøΩ IMPLEMENTATION HINTS
1. **Study existing login form structure** - copy the exact pattern
2. **Reuse existing validation methods** - don't reinvent
3. **Handle exceptions gracefully** - especially duplicate email constraint
4. **Test frequently** - compile after each major addition
5. **Use debug console** - app runs with real-time logging

---

## üìã DELIVERABLES
- Modified `LoginFrame_1.java` with working registration
- All validation scenarios tested and working
- Visual consistency with existing login form maintained

**Focus on function signatures and concepts, not full code implementations. Follow existing patterns!**
